What is the Abstract Factory Design pattern?

Abstract Factory patterns work around a super-factory which creates other factories.
This factory is also called as factory of factories. 
This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.

Abstract Factory Pattern says that just define an interface or abstract class for creating families of related (or dependent) objects
but without specifying their concrete sub-classes.That means Abstract Factory lets a class returns a factory of classes.



PACKAGE KEY:

client: Contains the client class which uses the factory creator/producer.
factory_producer: gets the requested factory by asking AbstractFactory

abstract_factory : Contains an abstract class w/ abstract methods which create factories
factory_classes: contains the (shape) factory which extends AbstractFactory.

interfaces: contains incomplete methods which are implemented in the concrete classes 
concrete_classes_shapes: Contains the actual implementations.


CREATION:

[step 1]
"interface" - Shape
implemented by
"concrete classes" -  Circle, Rectangle, Square

[step 2]
"abstract class" - AbstractFactory
extended by 
"factory class" - ShapeFactory

[step 3]
"factory producer" - FactoryProducer

[step 4]
"client" - AbstractFactoryClient


USAGE:

The client calls the FactoryProducer, which calls the AbstractFactory class.
The AbstractFactory class is extended by Factory Classes (eg. ShapeFactory)
The Factory Classes create objects of concrete classes: (e.g. Circle, Square, etc.)
These concrete classes are implementing an interface (eg. Shape, Color, etc.)